{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadrec\\\\src\\\\components\\\\job-board\\\\DragDrop.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nexport default function DragDrop(props) {\n  _s();\n\n  const [tasks, setTasks] = useState([{\n    name: 'Learn Angular',\n    category: 'wip',\n    bgcolor: 'yellow'\n  }, {\n    name: 'React',\n    category: 'wip',\n    bgcolor: 'pink'\n  }, {\n    name: 'Vue',\n    category: 'complete',\n    bgcolor: 'skyblue'\n  }]);\n  const [taskss, setTaskss] = useState({\n    wip: [],\n    complete: []\n  });\n  const [wip, setWip] = useState([]);\n  const [complete, setComplete] = useState([]);\n  var Newtasks = {\n    wip: [],\n    complete: []\n  };\n  var count1 = 0;\n  var count2 = 0;\n  useEffect(() => {\n    // setWip(Newtasks.wip[0]);\n    // setComplete(Newtasks.complete);\n    tasks.forEach(t => {\n      Newtasks[t.category].push( /*#__PURE__*/_jsxDEV(\"div\", {\n        onDragStart: e => onDragStart(e, t.name),\n        draggable: true,\n        className: \"draggable\",\n        style: {\n          backgroundColor: t.bgcolor\n        },\n        children: [t.name, t.category === 'wip' ? count1 = count1 + 1 : count2 = count2 + 1]\n      }, t.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this));\n      console.log(Newtasks);\n    });\n  }, []);\n\n  const onDragStart = (ev, id) => {\n    console.log('dragstart:', id);\n    ev.dataTransfer.setData('id', id);\n  };\n\n  const onDragOver = ev => {\n    ev.preventDefault();\n  };\n\n  const onDrop = (ev, cat) => {\n    let id = ev.dataTransfer.getData('id');\n    let tasksNew = tasks.filter(task => {\n      if (task.name === id) {\n        task.category = cat;\n        console.log(id);\n      }\n\n      return task;\n    });\n    setTasks(tasksNew); // this.setState({\n    //   // ...this.state.tasks,\n    //   tasks,\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-drag\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"DRAG & DROP DEMO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wip\",\n      onDragOver: e => onDragOver(e),\n      onDrop: e => {\n        onDrop(e, 'wip');\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"task-header\",\n        children: \"WIP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), Newtasks.wip]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"droppable\",\n      onDragOver: e => onDragOver(e),\n      onDrop: e => onDrop(e, 'complete'),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"task-header\",\n        children: \"COMPLETED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), Newtasks.complete]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DragDrop, \"J2mx4TDegjP2fpJ6gm2zwGPNMA0=\");\n\n_c = DragDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragDrop\");","map":{"version":3,"sources":["F:/nadrec/src/components/job-board/DragDrop.js"],"names":["React","useState","useEffect","DragDrop","props","tasks","setTasks","name","category","bgcolor","taskss","setTaskss","wip","complete","setWip","setComplete","Newtasks","count1","count2","forEach","t","push","e","onDragStart","backgroundColor","console","log","ev","id","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","tasksNew","filter","task"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function DragDrop(props) {\r\n  const [tasks, setTasks] = useState([\r\n    { name: 'Learn Angular', category: 'wip', bgcolor: 'yellow' },\r\n    { name: 'React', category: 'wip', bgcolor: 'pink' },\r\n    { name: 'Vue', category: 'complete', bgcolor: 'skyblue' },\r\n  ]);\r\n\r\n  const [taskss, setTaskss] = useState({ wip: [], complete: [] });\r\n  const [wip, setWip] = useState([]);\r\n  const [complete, setComplete] = useState([]);\r\n\r\n  var Newtasks = {\r\n    wip: [],\r\n    complete: [],\r\n  };\r\n  var count1 = 0;\r\n  var count2 = 0;\r\n  useEffect(() => {\r\n    // setWip(Newtasks.wip[0]);\r\n    // setComplete(Newtasks.complete);\r\n\r\n    tasks.forEach((t) => {\r\n      Newtasks[t.category].push(\r\n        <div\r\n          key={t.name}\r\n          onDragStart={(e) => onDragStart(e, t.name)}\r\n          draggable\r\n          className=\"draggable\"\r\n          style={{ backgroundColor: t.bgcolor }}\r\n        >\r\n          {t.name}\r\n\r\n          {t.category === 'wip' ? (count1 = count1 + 1) : (count2 = count2 + 1)}\r\n          {/* {t.category === 'wip' ? setWip('dkkkd') : setComplete('kjik')} */}\r\n        </div>\r\n      );\r\n      console.log(Newtasks);\r\n    });\r\n  }, []);\r\n\r\n  const onDragStart = (ev, id) => {\r\n    console.log('dragstart:', id);\r\n    ev.dataTransfer.setData('id', id);\r\n  };\r\n\r\n  const onDragOver = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n\r\n  const onDrop = (ev, cat) => {\r\n    let id = ev.dataTransfer.getData('id');\r\n\r\n    let tasksNew = tasks.filter((task) => {\r\n      if (task.name === id) {\r\n        task.category = cat;\r\n        console.log(id);\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(tasksNew);\r\n\r\n    // this.setState({\r\n    //   // ...this.state.tasks,\r\n    //   tasks,\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-drag\">\r\n      <h2 className=\"header\">DRAG & DROP DEMO</h2>\r\n      <div\r\n        className=\"wip\"\r\n        onDragOver={(e) => onDragOver(e)}\r\n        onDrop={(e) => {\r\n          onDrop(e, 'wip');\r\n        }}\r\n      >\r\n        <span className=\"task-header\">WIP</span>\r\n        {Newtasks.wip}\r\n      </div>\r\n      <div\r\n        className=\"droppable\"\r\n        onDragOver={(e) => onDragOver(e)}\r\n        onDrop={(e) => onDrop(e, 'complete')}\r\n      >\r\n        <span className=\"task-header\">COMPLETED</span>\r\n        {Newtasks.complete}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}