{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\nadrec\\\\src\\\\components\\\\job-board\\\\DragDrop.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nlet animationId;\n\nconst sigmoid = x => x / (1 + Math.abs(x));\n\nconst initialState = {\n  transform: null,\n  prevX: 0,\n  rotation: 0\n};\n\nclass DragDrop extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initialState\n    };\n\n    this.patchTransform = () => {\n      const {\n        snapshot: {\n          isDragging\n        },\n        style,\n        animationRotationFade,\n        rotationMultiplier\n      } = this.props;\n\n      if (isDragging && style.transform) {\n        const currentX = style.transform.match(/translate\\(.{1,}\\)/g)[0].match(/-?[0-9]{1,}/g)[0];\n        const velocity = currentX - this.state.prevX;\n        const prevRotation = this.state.rotation;\n        let rotation = prevRotation * animationRotationFade + sigmoid(velocity) * rotationMultiplier;\n        const newTransform = `${style.transform} rotate(${rotation}deg)`;\n        if (Math.abs(rotation) < 0.01) rotation = 0;\n        this.setState({\n          transform: newTransform,\n          prevX: currentX,\n          rotation\n        }, () => {\n          animationId = requestAnimationFrame(this.patchTransform);\n        });\n      } else {\n        animationId = requestAnimationFrame(this.patchTransform);\n      }\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.snapshot.dropAnimation && state.transform) {\n      return { ...initialState\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.snapshot.isDragging && this.props.snapshot.isDragging) {\n      animationId = requestAnimationFrame(this.patchTransform);\n    }\n\n    if (prevProps.snapshot.isDragging && !this.props.snapshot.isDragging) {\n      cancelAnimationFrame(animationId);\n    }\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(animationId);\n  }\n\n  render() {\n    const {\n      snapshot: {\n        isDragging,\n        dropAnimation\n      }\n    } = this.props;\n    const style = isDragging && !dropAnimation ? { ...this.props.style,\n      transform: this.state.transform\n    } : this.props.style;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: this.props.children(style)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nDragDrop.propTypes = {\n  snapshot: PropTypes.shape({\n    isDragging: PropTypes.bool.isRequired,\n    dropAnimation: PropTypes.shape()\n  }).isRequired,\n  style: PropTypes.shape().isRequired,\n  children: PropTypes.func.isRequired,\n  animationRotationFade: PropTypes.number,\n  rotationMultiplier: PropTypes.number\n};\nDragDrop.defaultProps = {\n  animationRotationFade: 0.9,\n  rotationMultiplier: 1.3\n};\nexport default DragDrop;","map":{"version":3,"sources":["F:/nadrec/src/components/job-board/DragDrop.js"],"names":["React","Component","Fragment","PropTypes","animationId","sigmoid","x","Math","abs","initialState","transform","prevX","rotation","DragDrop","state","patchTransform","snapshot","isDragging","style","animationRotationFade","rotationMultiplier","props","currentX","match","velocity","prevRotation","newTransform","setState","requestAnimationFrame","getDerivedStateFromProps","dropAnimation","componentDidUpdate","prevProps","cancelAnimationFrame","componentWillUnmount","render","children","propTypes","shape","bool","isRequired","func","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet animationId;\r\nconst sigmoid = (x) => x / (1 + Math.abs(x));\r\nconst initialState = {\r\n  transform: null,\r\n  prevX: 0,\r\n  rotation: 0,\r\n};\r\n\r\nclass DragDrop extends Component {\r\n  static propTypes = {\r\n    snapshot: PropTypes.shape({\r\n      isDragging: PropTypes.bool.isRequired,\r\n      dropAnimation: PropTypes.shape(),\r\n    }).isRequired,\r\n    style: PropTypes.shape().isRequired,\r\n    children: PropTypes.func.isRequired,\r\n    animationRotationFade: PropTypes.number,\r\n    rotationMultiplier: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    animationRotationFade: 0.9,\r\n    rotationMultiplier: 1.3,\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.snapshot.dropAnimation && state.transform) {\r\n      return {\r\n        ...initialState,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  state = {\r\n    ...initialState,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!prevProps.snapshot.isDragging && this.props.snapshot.isDragging) {\r\n      animationId = requestAnimationFrame(this.patchTransform);\r\n    }\r\n\r\n    if (prevProps.snapshot.isDragging && !this.props.snapshot.isDragging) {\r\n      cancelAnimationFrame(animationId);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(animationId);\r\n  }\r\n\r\n  patchTransform = () => {\r\n    const {\r\n      snapshot: { isDragging },\r\n      style,\r\n      animationRotationFade,\r\n      rotationMultiplier,\r\n    } = this.props;\r\n\r\n    if (isDragging && style.transform) {\r\n      const currentX = style.transform\r\n        .match(/translate\\(.{1,}\\)/g)[0]\r\n        .match(/-?[0-9]{1,}/g)[0];\r\n\r\n      const velocity = currentX - this.state.prevX;\r\n      const prevRotation = this.state.rotation;\r\n\r\n      let rotation =\r\n        prevRotation * animationRotationFade +\r\n        sigmoid(velocity) * rotationMultiplier;\r\n\r\n      const newTransform = `${style.transform} rotate(${rotation}deg)`;\r\n\r\n      if (Math.abs(rotation) < 0.01) rotation = 0;\r\n\r\n      this.setState(\r\n        {\r\n          transform: newTransform,\r\n          prevX: currentX,\r\n          rotation,\r\n        },\r\n        () => {\r\n          animationId = requestAnimationFrame(this.patchTransform);\r\n        }\r\n      );\r\n    } else {\r\n      animationId = requestAnimationFrame(this.patchTransform);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      snapshot: { isDragging, dropAnimation },\r\n    } = this.props;\r\n\r\n    const style =\r\n      isDragging && !dropAnimation\r\n        ? {\r\n            ...this.props.style,\r\n            transform: this.state.transform,\r\n          }\r\n        : this.props.style;\r\n\r\n    return <Fragment>{this.props.children(style)}</Fragment>;\r\n  }\r\n}\r\n\r\nexport default DragDrop;\r\n"]},"metadata":{},"sourceType":"module"}