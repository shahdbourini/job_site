{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadric\\\\src\\\\components\\\\tables\\\\EditableTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography, Button } from 'antd';\nimport './style.css';\nconst originData = [];\n\nfor (let i = 0; i < 10; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 46\n  }, this) : /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 64\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EditableCell;\n\nconst EditableTable = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  handleAdd = () => {\n    const {\n      count,\n      dataSource\n    } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: '32',\n      address: `London, Park Lane no. ${count}`\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1\n    });\n  };\n\n  const handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item,\n      ...row\n    });\n    this.setState({\n      dataSource: newData\n    });\n  };\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      age: '',\n      address: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'age',\n    dataIndex: 'age',\n    width: '15%',\n    editable: true\n  }, {\n    title: 'address',\n    dataIndex: 'address',\n    width: '40%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography.Link, {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16\n      },\n      children: \"Add a row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      components: {\n        body: {\n          cell: EditableCell\n        }\n      },\n      bordered: true,\n      dataSource: data,\n      columns: mergedColumns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: cancel\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableTable, \"q2WvQ48g9gsiNPOsL7D7gpry76Y=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["F:/nadric/src/components/tables/EditableTable.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","Typography","Button","originData","i","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","EditableTable","form","useForm","data","setData","editingKey","setEditingKey","isEditing","handleAdd","count","dataSource","state","newData","setState","handleSave","row","findIndex","item","splice","edit","setFieldsValue","cancel","save","validateFields","errInfo","console","log","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","marginBottom","body","cell","onChange"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Table,\r\n  Input,\r\n  InputNumber,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n} from 'antd';\r\nimport './style.css';\r\nconst originData = [];\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n  originData.push({\r\n    key: i.toString(),\r\n    name: `Edrward ${i}`,\r\n    age: 32,\r\n    address: `London Park no. ${i}`,\r\n  });\r\n}\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n          }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nconst EditableTable = () => {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(originData);\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      name: `Edward King ${count}`,\r\n      age: '32',\r\n      address: `London, Park Lane no. ${count}`,\r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1,\r\n    });\r\n  };\r\n  const handleSave = (row) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    this.setState({\r\n      dataSource: newData,\r\n    });\r\n  };\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      age: '',\r\n      address: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => key === item.key);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'age',\r\n      dataIndex: 'age',\r\n      width: '15%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'address',\r\n      dataIndex: 'address',\r\n      width: '40%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <a\r\n              href=\"javascript:;\"\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n              }}\r\n            >\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <Typography.Link\r\n            disabled={editingKey !== ''}\r\n            onClick={() => edit(record)}\r\n          >\r\n            Edit\r\n          </Typography.Link>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Button\r\n        onClick={this.handleAdd}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n        }}\r\n      >\r\n        Add a row\r\n      </Button>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel,\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default EditableTable;\r\n"]},"metadata":{},"sourceType":"module"}