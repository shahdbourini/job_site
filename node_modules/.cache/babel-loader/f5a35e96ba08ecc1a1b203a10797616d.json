{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadrec\\\\src\\\\components\\\\job-board\\\\DragDrop.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nconst DragDrop = () => {\n  _s();\n\n  const [tasks, setTaskStatus] = useState(tasksList);\n  const changeTaskStatus = useCallback((id, status) => {\n    let task = tasks.find(task => task._id === id);\n    const taskIndex = tasks.indexOf(task);\n    task = { ...task,\n      status\n    };\n    let newTasks = update(tasks, {\n      [taskIndex]: {\n        $set: task\n      }\n    });\n    setTaskStatus(newTasks);\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: \" Kanban Board \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        style: classes.board,\n        children: channels.map(channel => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n          status: channel,\n          changeTaskStatus: changeTaskStatus,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: classes.column,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: classes.columnHead,\n              children: labelsMap[channel]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: tasks.filter(item => item.status === channel).map(item => /*#__PURE__*/_jsxDEV(KanbanItem, {\n                id: item._id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: classes.item,\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 25\n                }, this)\n              }, item._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)\n        }, channel, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DragDrop, \"DkRBXBVXMdZ04Lj1ejgZ1O/CfTw=\");\n\n_c = DragDrop;\nexport default DragDrop;\n\nconst KanbanColumn = ({\n  status,\n  changeTaskStatus,\n  children\n}) => {\n  _s2();\n\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: 'card',\n\n    drop(item) {\n      changeTaskStatus(item.id, status);\n    }\n\n  });\n  drop(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [\" \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(KanbanColumn, \"jNyD3LiDULwN1wggB3ULPaLZVmI=\", true);\n\n_c2 = KanbanColumn;\n\nconst KanbanItem = ({\n  id,\n  children\n}) => {\n  _s3();\n\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: 'card',\n      id\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      opacity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(KanbanItem, \"SAotHx5N7ORcDCKJxIYnUEpUB64=\", true);\n\n_c3 = KanbanItem;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DragDrop\");\n$RefreshReg$(_c2, \"KanbanColumn\");\n$RefreshReg$(_c3, \"KanbanItem\");","map":{"version":3,"sources":["F:/nadrec/src/components/job-board/DragDrop.js"],"names":["React","useState","useCallback","useRef","DragDrop","tasks","setTaskStatus","tasksList","changeTaskStatus","id","status","task","find","_id","taskIndex","indexOf","newTasks","update","$set","HTML5Backend","classes","board","channels","map","channel","column","columnHead","labelsMap","filter","item","title","KanbanColumn","children","ref","drop","useDrop","accept","KanbanItem","isDragging","drag","useDrag","type","collect","monitor","opacity"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\n\r\nconst DragDrop = () => {\r\n  const [tasks, setTaskStatus] = useState(tasksList);\r\n\r\n  const changeTaskStatus = useCallback(\r\n    (id, status) => {\r\n      let task = tasks.find((task) => task._id === id);\r\n      const taskIndex = tasks.indexOf(task);\r\n      task = { ...task, status };\r\n      let newTasks = update(tasks, {\r\n        [taskIndex]: { $set: task },\r\n      });\r\n      setTaskStatus(newTasks);\r\n    },\r\n    [tasks]\r\n  );\r\n\r\n  return (\r\n    <main>\r\n      <header> Kanban Board </header>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <section style={classes.board}>\r\n          {channels.map((channel) => (\r\n            <KanbanColumn\r\n              key={channel}\r\n              status={channel}\r\n              changeTaskStatus={changeTaskStatus}\r\n            >\r\n              <div style={classes.column}>\r\n                <div style={classes.columnHead}>{labelsMap[channel]}</div>\r\n                <div>\r\n                  {tasks\r\n                    .filter((item) => item.status === channel)\r\n                    .map((item) => (\r\n                      <KanbanItem key={item._id} id={item._id}>\r\n                        <div style={classes.item}>{item.title}</div>\r\n                      </KanbanItem>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </KanbanColumn>\r\n          ))}\r\n        </section>\r\n      </DndProvider>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DragDrop;\r\n\r\nconst KanbanColumn = ({ status, changeTaskStatus, children }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: 'card',\r\n    drop(item) {\r\n      changeTaskStatus(item.id, status);\r\n    },\r\n  });\r\n  drop(ref);\r\n  return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nconst KanbanItem = ({ id, children }) => {\r\n  const ref = useRef(null);\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: 'card', id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}