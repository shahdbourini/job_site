{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadrec\\\\src\\\\components\\\\job-board\\\\DragDrop.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nconst DragDrop = () => {\n  const data = {\n    lanes: [{\n      id: 'lane1',\n      title: 'Planned Tasks',\n      label: '2/2',\n      cards: [{\n        id: 'Card1',\n        title: 'Write Blog',\n        description: 'Can AI make memes',\n        label: '30 mins'\n      }, {\n        id: 'Card2',\n        title: 'Pay Rent',\n        description: 'Transfer via NEFT',\n        label: '5 mins',\n        metadata: {\n          sha: 'be312a1'\n        }\n      }]\n    }, {\n      id: 'lane2',\n      title: 'Completed',\n      label: '0/0',\n      cards: []\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Board, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = DragDrop;\nexport default DragDrop;\n\nconst KanbanColumn = ({\n  status,\n  changeTaskStatus,\n  children\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: 'card',\n\n    drop(item) {\n      changeTaskStatus(item.id, status);\n    }\n\n  });\n  drop(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [\" \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n_s(KanbanColumn, \"jNyD3LiDULwN1wggB3ULPaLZVmI=\", true);\n\n_c2 = KanbanColumn;\n\nconst KanbanItem = ({\n  id,\n  children\n}) => {\n  _s2();\n\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: 'card',\n      id\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      opacity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(KanbanItem, \"SAotHx5N7ORcDCKJxIYnUEpUB64=\", true);\n\n_c3 = KanbanItem;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DragDrop\");\n$RefreshReg$(_c2, \"KanbanColumn\");\n$RefreshReg$(_c3, \"KanbanItem\");","map":{"version":3,"sources":["F:/nadrec/src/components/job-board/DragDrop.js"],"names":["React","useState","useCallback","useRef","DragDrop","data","lanes","id","title","label","cards","description","metadata","sha","KanbanColumn","status","changeTaskStatus","children","ref","drop","useDrop","accept","item","KanbanItem","isDragging","drag","useDrag","type","collect","monitor","opacity"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAqD,OAArD;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,IAAI,GAAG;AACXC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,EAAE,EAAE,OADN;AAEEC,MAAAA,KAAK,EAAE,eAFT;AAGEC,MAAAA,KAAK,EAAE,KAHT;AAIEC,MAAAA,KAAK,EAAE,CACL;AACEH,QAAAA,EAAE,EAAE,OADN;AAEEC,QAAAA,KAAK,EAAE,YAFT;AAGEG,QAAAA,WAAW,EAAE,mBAHf;AAIEF,QAAAA,KAAK,EAAE;AAJT,OADK,EAOL;AACEF,QAAAA,EAAE,EAAE,OADN;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAGEG,QAAAA,WAAW,EAAE,mBAHf;AAIEF,QAAAA,KAAK,EAAE,QAJT;AAKEG,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP;AALZ,OAPK;AAJT,KADK,EAqBL;AACEN,MAAAA,EAAE,EAAE,OADN;AAEEC,MAAAA,KAAK,EAAE,WAFT;AAGEC,MAAAA,KAAK,EAAE,KAHT;AAIEC,MAAAA,KAAK,EAAE;AAJT,KArBK;AADI,GAAb;AA8BA,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEL;AAAb;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CApCD;;KAAMD,Q;AAsCN,eAAeA,QAAf;;AAEA,MAAMU,YAAY,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,gBAAV;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAAA;;AAC/D,QAAMC,GAAG,GAAGf,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,GAAGgB,IAAH,IAAWC,OAAO,CAAC;AACvBC,IAAAA,MAAM,EAAE,MADe;;AAEvBF,IAAAA,IAAI,CAACG,IAAD,EAAO;AACTN,MAAAA,gBAAgB,CAACM,IAAI,CAACf,EAAN,EAAUQ,MAAV,CAAhB;AACD;;AAJsB,GAAD,CAAxB;AAMAI,EAAAA,IAAI,CAACD,GAAD,CAAJ;AACA,sBAAO;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA,oBAAiBD,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAVD;;GAAMH,Y;;MAAAA,Y;;AAYN,MAAMS,UAAU,GAAG,CAAC;AAAEhB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAD,KAAsB;AAAA;;AACvC,QAAMC,GAAG,GAAGf,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,CAAC;AAAEqB,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBC,OAAO,CAAC;AACrCJ,IAAAA,IAAI,EAAE;AAAEK,MAAAA,IAAI,EAAE,MAAR;AAAgBpB,MAAAA;AAAhB,KAD+B;AAErCqB,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACrBL,MAAAA,UAAU,EAAEK,OAAO,CAACL,UAAR;AADS,KAAd;AAF4B,GAAD,CAAtC;AAMA,QAAMM,OAAO,GAAGN,UAAU,GAAG,CAAH,GAAO,CAAjC;AACAC,EAAAA,IAAI,CAACP,GAAD,CAAJ;AACA,sBACE;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAe,IAAA,KAAK,EAAE;AAAEY,MAAAA;AAAF,KAAtB;AAAA,cACGb;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfD;;IAAMM,U;;MAAAA,U","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\n\r\nconst DragDrop = () => {\r\n  const data = {\r\n    lanes: [\r\n      {\r\n        id: 'lane1',\r\n        title: 'Planned Tasks',\r\n        label: '2/2',\r\n        cards: [\r\n          {\r\n            id: 'Card1',\r\n            title: 'Write Blog',\r\n            description: 'Can AI make memes',\r\n            label: '30 mins',\r\n          },\r\n          {\r\n            id: 'Card2',\r\n            title: 'Pay Rent',\r\n            description: 'Transfer via NEFT',\r\n            label: '5 mins',\r\n            metadata: { sha: 'be312a1' },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: 'lane2',\r\n        title: 'Completed',\r\n        label: '0/0',\r\n        cards: [],\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <>\r\n      <Board data={data} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragDrop;\r\n\r\nconst KanbanColumn = ({ status, changeTaskStatus, children }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: 'card',\r\n    drop(item) {\r\n      changeTaskStatus(item.id, status);\r\n    },\r\n  });\r\n  drop(ref);\r\n  return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nconst KanbanItem = ({ id, children }) => {\r\n  const ref = useRef(null);\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: 'card', id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}