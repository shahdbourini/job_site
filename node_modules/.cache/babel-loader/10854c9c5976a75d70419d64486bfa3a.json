{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadrec\\\\src\\\\components\\\\job-board\\\\DragDrop.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nconst DragDrop = () => {\n  const data = {\n    lanes: [{\n      id: 'lane1',\n      title: 'Planned Tasks',\n      label: '2/2',\n      cards: [{\n        id: 'Card1',\n        title: 'Write Blog',\n        description: 'Can AI make memes',\n        label: '30 mins'\n      }, {\n        id: 'Card2',\n        title: 'Pay Rent',\n        description: 'Transfer via NEFT',\n        label: '5 mins',\n        metadata: {\n          sha: 'be312a1'\n        }\n      }]\n    }, {\n      id: 'lane2',\n      title: 'Completed',\n      label: '0/0',\n      cards: []\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: \" Kanban Board \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        style: classes.board,\n        children: channels.map(channel => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n          status: channel,\n          changeTaskStatus: changeTaskStatus,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: classes.column,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: classes.columnHead,\n              children: labelsMap[channel]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: tasks.filter(item => item.status === channel).map(item => /*#__PURE__*/_jsxDEV(KanbanItem, {\n                id: item._id,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: classes.item,\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 25\n                }, this)\n              }, item._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, channel, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DragDrop;\nexport default DragDrop;\n\nconst KanbanColumn = ({\n  status,\n  changeTaskStatus,\n  children\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: 'card',\n\n    drop(item) {\n      changeTaskStatus(item.id, status);\n    }\n\n  });\n  drop(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [\" \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_s(KanbanColumn, \"jNyD3LiDULwN1wggB3ULPaLZVmI=\", true);\n\n_c2 = KanbanColumn;\n\nconst KanbanItem = ({\n  id,\n  children\n}) => {\n  _s2();\n\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: 'card',\n      id\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      opacity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(KanbanItem, \"SAotHx5N7ORcDCKJxIYnUEpUB64=\", true);\n\n_c3 = KanbanItem;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DragDrop\");\n$RefreshReg$(_c2, \"KanbanColumn\");\n$RefreshReg$(_c3, \"KanbanItem\");","map":{"version":3,"sources":["F:/nadrec/src/components/job-board/DragDrop.js"],"names":["React","useState","useCallback","useRef","DragDrop","data","lanes","id","title","label","cards","description","metadata","sha","HTML5Backend","classes","board","channels","map","channel","changeTaskStatus","column","columnHead","labelsMap","tasks","filter","item","status","_id","KanbanColumn","children","ref","drop","useDrop","accept","KanbanItem","isDragging","drag","useDrag","type","collect","monitor","opacity"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\n\r\nconst DragDrop = () => {\r\n  const data = {\r\n    lanes: [\r\n      {\r\n        id: 'lane1',\r\n        title: 'Planned Tasks',\r\n        label: '2/2',\r\n        cards: [\r\n          {id: 'Card1', title: 'Write Blog', description: 'Can AI make memes', label: '30 mins'},\r\n        {id: 'Card2', title: 'Pay Rent', description: 'Transfer via NEFT', label: '5 mins', metadata: {sha: 'be312a1'}}\r\n        ]\r\n      },\r\n      {\r\n        id: 'lane2',\r\n        title: 'Completed',\r\n        label: '0/0',\r\n        cards: []\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <main>\r\n      <header> Kanban Board </header>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <section style={classes.board}>\r\n          {channels.map((channel) => (\r\n            <KanbanColumn\r\n              key={channel}\r\n              status={channel}\r\n              changeTaskStatus={changeTaskStatus}\r\n            >\r\n              <div style={classes.column}>\r\n                <div style={classes.columnHead}>{labelsMap[channel]}</div>\r\n                <div>\r\n                  {tasks\r\n                    .filter((item) => item.status === channel)\r\n                    .map((item) => (\r\n                      <KanbanItem key={item._id} id={item._id}>\r\n                        <div style={classes.item}>{item.title}</div>\r\n                      </KanbanItem>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </KanbanColumn>\r\n          ))}\r\n        </section>\r\n      </DndProvider>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DragDrop;\r\n\r\nconst KanbanColumn = ({ status, changeTaskStatus, children }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: 'card',\r\n    drop(item) {\r\n      changeTaskStatus(item.id, status);\r\n    },\r\n  });\r\n  drop(ref);\r\n  return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nconst KanbanItem = ({ id, children }) => {\r\n  const ref = useRef(null);\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: 'card', id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}