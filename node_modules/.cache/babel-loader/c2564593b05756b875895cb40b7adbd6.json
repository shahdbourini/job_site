{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\nadric\\\\src\\\\components\\\\tables\\\\EditableTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Table, Input, Button, Popconfirm, Form, Space } from 'antd';\nimport './style.css';\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        id: `Edward King ${count}`,\n        title: '32',\n        location: `London, Park Lane no. ${count}`,\n        Sdate: '5-10',\n        Edate: '9-10',\n        status: 'yes'\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: '#',\n      dataIndex: 'id' // width: '15%',\n      // editable: true,\n\n    }, {\n      title: 'JOB TITLE',\n      dataIndex: 'title'\n    }, {\n      title: 'JOB LOCATION',\n      dataIndex: 'location'\n    }, {\n      title: 'START DATE',\n      dataIndex: 'Sdate'\n    }, {\n      title: 'END DATE',\n      dataIndex: 'Edate'\n    }, {\n      title: 'STATUS',\n      dataIndex: 'status'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) => /*#__PURE__*/_jsxDEV(Space, {\n        size: \"middle\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to delete?\",\n          onConfirm: () => this.handleDelete(record.key),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }];\n    this.state = {\n      dataSource: [{\n        key: '0',\n        id: 'Edward King 0',\n        title: '32',\n        location: 'London, Park Lane no. 0',\n        Sdate: '5-10',\n        Edate: '9-10',\n        status: 'yes'\n      }, {\n        key: '1',\n        id: 'Edward King 1',\n        title: '32',\n        location: 'London, Park Lane no. 1',\n        Sdate: '5-10',\n        Edate: '9-10',\n        status: 'yes'\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleAdd,\n        type: \"primary\",\n        style: {\n          marginBottom: 16\n        },\n        children: \"Add a row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: \"true\",\n        dataSource: dataSource,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["F:/nadric/src/components/tables/EditableTable.js"],"names":["React","useContext","useState","useEffect","useRef","ReactDOM","Table","Input","Button","Popconfirm","Form","Space","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","EditableTable","Component","constructor","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","id","location","Sdate","Edate","status","row","findIndex","splice","columns","render","_","components","body","cell","map","col","onCell","marginBottom"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,KAAjD,QAA8D,MAA9D;AACA,OAAO,aAAP;AACA,MAAMC,eAAe,gBAAGZ,KAAK,CAACa,aAAN,CAAoB,IAApB,CAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC3C,QAAM,CAACC,IAAD,IAASP,IAAI,CAACQ,OAAL,EAAf;AACA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,EAAED,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA,2BACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,MAAA,KAAK,EAAEA,IAAjC;AAAA,6BACE,mBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATD;;GAAMF,W;UACWJ,IAAI,CAACQ,O;;;KADhBJ,W;;AAWN,MAAMK,YAAY,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,QAFoB;AAGpBC,EAAAA,QAHoB;AAIpBC,EAAAA,SAJoB;AAKpBC,EAAAA,MALoB;AAMpBC,EAAAA,UANoB;AAOpB,KAAGC;AAPiB,CAAD,KAQf;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM2B,QAAQ,GAAGzB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMa,IAAI,GAAGhB,UAAU,CAACW,eAAD,CAAvB;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,OAAJ,EAAa;AACXE,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB;AACD;AACF,GAJQ,EAIN,CAACJ,OAAD,CAJM,CAAT;;AAMA,QAAMK,UAAU,GAAG,MAAM;AACvBJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAV,IAAAA,IAAI,CAACgB,cAAL,CAAoB;AAClB,OAACV,SAAD,GAAaC,MAAM,CAACD,SAAD;AADD,KAApB;AAGD,GALD;;AAOA,QAAMW,IAAI,GAAG,YAAY;AACvB,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,cAAL,EAArB;AACAJ,MAAAA,UAAU;AACVP,MAAAA,UAAU,CAAC,EAAE,GAAGD,MAAL;AAAa,WAAGW;AAAhB,OAAD,CAAV;AACD,KAJD,CAIE,OAAOE,OAAP,EAAgB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,OAA5B;AACD;AACF,GARD;;AAUA,MAAIG,SAAS,GAAGlB,QAAhB;;AAEA,MAAID,QAAJ,EAAc;AACZmB,IAAAA,SAAS,GAAGb,OAAO,gBACjB,QAAC,IAAD,CAAM,IAAN;AACE,MAAA,KAAK,EAAE;AACLc,QAAAA,MAAM,EAAE;AADH,OADT;AAIE,MAAA,IAAI,EAAElB,SAJR;AAKE,MAAA,KAAK,EAAE,CACL;AACEmB,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAG,GAAEvB,KAAM;AAFpB,OADK,CALT;AAAA,6BAYE,QAAC,KAAD;AAAO,QAAA,GAAG,EAAES,QAAZ;AAAsB,QAAA,YAAY,EAAEK,IAApC;AAA0C,QAAA,MAAM,EAAEA;AAAlD;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,YADiB,gBAgBjB;AACE,MAAA,SAAS,EAAC,0BADZ;AAEE,MAAA,KAAK,EAAE;AACLU,QAAAA,YAAY,EAAE;AADT,OAFT;AAKE,MAAA,OAAO,EAAEZ,UALX;AAAA,gBAOGV;AAPH;AAAA;AAAA;AAAA;AAAA,YAhBF;AA0BD;;AAED,sBAAO,mBAAQI,SAAR;AAAA,cAAoBc;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnED;;IAAMrB,Y;;MAAAA,Y;;AAqEN,MAAM0B,aAAN,SAA4B7C,KAAK,CAAC8C,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAAC/B,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuEnBgC,YAvEmB,GAuEHC,GAAD,IAAS;AACtB,YAAMC,UAAU,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,UAAf,CAAnB;AACA,WAAKE,QAAL,CAAc;AACZF,QAAAA,UAAU,EAAEA,UAAU,CAACG,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACL,GAAL,KAAaA,GAAzC;AADA,OAAd;AAGD,KA5EkB;;AAAA,SA6EnBM,SA7EmB,GA6EP,MAAM;AAChB,YAAM;AAAEC,QAAAA,KAAF;AAASN,QAAAA;AAAT,UAAwB,KAAKC,KAAnC;AACA,YAAMM,OAAO,GAAG;AACdR,QAAAA,GAAG,EAAEO,KADS;AAEdE,QAAAA,EAAE,EAAG,eAAcF,KAAM,EAFX;AAGdpC,QAAAA,KAAK,EAAE,IAHO;AAIduC,QAAAA,QAAQ,EAAG,yBAAwBH,KAAM,EAJ3B;AAKdI,QAAAA,KAAK,EAAE,MALO;AAMdC,QAAAA,KAAK,EAAE,MANO;AAOdC,QAAAA,MAAM,EAAE;AAPM,OAAhB;AASA,WAAKV,QAAL,CAAc;AACZF,QAAAA,UAAU,EAAE,CAAC,GAAGA,UAAJ,EAAgBO,OAAhB,CADA;AAEZD,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAFH,OAAd;AAID,KA5FkB;;AAAA,SA6FnB/B,UA7FmB,GA6FLsC,GAAD,IAAS;AACpB,YAAMN,OAAO,GAAG,CAAC,GAAG,KAAKN,KAAL,CAAWD,UAAf,CAAhB;AACA,YAAMnC,KAAK,GAAG0C,OAAO,CAACO,SAAR,CAAmBV,IAAD,IAAUS,GAAG,CAACd,GAAJ,KAAYK,IAAI,CAACL,GAA7C,CAAd;AACA,YAAMK,IAAI,GAAGG,OAAO,CAAC1C,KAAD,CAApB;AACA0C,MAAAA,OAAO,CAACQ,MAAR,CAAelD,KAAf,EAAsB,CAAtB,EAAyB,EAAE,GAAGuC,IAAL;AAAW,WAAGS;AAAd,OAAzB;AACA,WAAKX,QAAL,CAAc;AACZF,QAAAA,UAAU,EAAEO;AADA,OAAd;AAGD,KArGkB;;AAEjB,SAAKS,OAAL,GAAe,CACb;AACE9C,MAAAA,KAAK,EAAE,GADT;AAEEG,MAAAA,SAAS,EAAE,IAFb,CAGE;AACA;;AAJF,KADa,EAOb;AACEH,MAAAA,KAAK,EAAE,WADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAPa,EAWb;AACEH,MAAAA,KAAK,EAAE,cADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAXa,EAeb;AACEH,MAAAA,KAAK,EAAE,YADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAfa,EAmBb;AACEH,MAAAA,KAAK,EAAE,UADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAnBa,EAuBb;AACEH,MAAAA,KAAK,EAAE,QADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAvBa,EA2Bb;AACEH,MAAAA,KAAK,EAAE,WADT;AAEEG,MAAAA,SAAS,EAAE,WAFb;AAGE4C,MAAAA,MAAM,EAAE,CAACC,CAAD,EAAI5C,MAAJ,kBACN,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,UAAD;AACE,UAAA,KAAK,EAAC,iBADR;AAEE,UAAA,SAAS,EAAE,MAAM,KAAKwB,YAAL,CAAkBxB,MAAM,CAACyB,GAAzB,CAFnB;AAAA,iCAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,KA3Ba,CAAf;AA4CA,SAAKE,KAAL,GAAa;AACXD,MAAAA,UAAU,EAAE,CACV;AACED,QAAAA,GAAG,EAAE,GADP;AAEES,QAAAA,EAAE,EAAE,eAFN;AAGEtC,QAAAA,KAAK,EAAE,IAHT;AAIEuC,QAAAA,QAAQ,EAAE,yBAJZ;AAKEC,QAAAA,KAAK,EAAE,MALT;AAMEC,QAAAA,KAAK,EAAE,MANT;AAOEC,QAAAA,MAAM,EAAE;AAPV,OADU,EAUV;AACEb,QAAAA,GAAG,EAAE,GADP;AAEES,QAAAA,EAAE,EAAE,eAFN;AAGEtC,QAAAA,KAAK,EAAE,IAHT;AAIEuC,QAAAA,QAAQ,EAAE,yBAJZ;AAKEC,QAAAA,KAAK,EAAE,MALT;AAMEC,QAAAA,KAAK,EAAE,MANT;AAOEC,QAAAA,MAAM,EAAE;AAPV,OAVU,CADD;AAqBXN,MAAAA,KAAK,EAAE;AArBI,KAAb;AAuBD;;AAkCDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA;AAAF,QAAiB,KAAKC,KAA5B;AACA,UAAMkB,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAE;AACJP,QAAAA,GAAG,EAAEjD,WADD;AAEJyD,QAAAA,IAAI,EAAEpD;AAFF;AADW,KAAnB;AAMA,UAAM+C,OAAO,GAAG,KAAKA,OAAL,CAAaM,GAAb,CAAkBC,GAAD,IAAS;AACxC,UAAI,CAACA,GAAG,CAACpD,QAAT,EAAmB;AACjB,eAAOoD,GAAP;AACD;;AAED,aAAO,EACL,GAAGA,GADE;AAELC,QAAAA,MAAM,EAAGlD,MAAD,KAAa;AACnBA,UAAAA,MADmB;AAEnBH,UAAAA,QAAQ,EAAEoD,GAAG,CAACpD,QAFK;AAGnBE,UAAAA,SAAS,EAAEkD,GAAG,CAAClD,SAHI;AAInBH,UAAAA,KAAK,EAAEqD,GAAG,CAACrD,KAJQ;AAKnBK,UAAAA,UAAU,EAAE,KAAKA;AALE,SAAb;AAFH,OAAP;AAUD,KAfe,CAAhB;AAgBA,wBACE;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAK8B,SADhB;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,KAAK,EAAE;AACLoB,UAAAA,YAAY,EAAE;AADT,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,KAAD;AACE,QAAA,UAAU,EAAEN,UADd;AAEE,QAAA,YAAY,EAAE,MAAM,cAFtB;AAGE,QAAA,QAAQ,EAAC,MAHX;AAIE,QAAA,UAAU,EAAEnB,UAJd;AAKE,QAAA,OAAO,EAAEgB;AALX;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AApJyC;;AAuJ5C,eAAerB,aAAf","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Input, Button, Popconfirm, Form, Space } from 'antd';\r\nimport './style.css';\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: '#',\r\n        dataIndex: 'id',\r\n        // width: '15%',\r\n        // editable: true,\r\n      },\r\n      {\r\n        title: 'JOB TITLE',\r\n        dataIndex: 'title',\r\n      },\r\n      {\r\n        title: 'JOB LOCATION',\r\n        dataIndex: 'location',\r\n      },\r\n      {\r\n        title: 'START DATE',\r\n        dataIndex: 'Sdate',\r\n      },\r\n      {\r\n        title: 'END DATE',\r\n        dataIndex: 'Edate',\r\n      },\r\n      {\r\n        title: 'STATUS',\r\n        dataIndex: 'status',\r\n      },\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (_, record) => (\r\n          <Space size=\"middle\">\r\n            <a>Edit</a>\r\n\r\n            <Popconfirm\r\n              title=\"Sure to delete?\"\r\n              onConfirm={() => this.handleDelete(record.key)}\r\n            >\r\n              <a>Delete</a>\r\n            </Popconfirm>\r\n          </Space>\r\n        ),\r\n      },\r\n    ];\r\n    this.state = {\r\n      dataSource: [\r\n        {\r\n          key: '0',\r\n          id: 'Edward King 0',\r\n          title: '32',\r\n          location: 'London, Park Lane no. 0',\r\n          Sdate: '5-10',\r\n          Edate: '9-10',\r\n          status: 'yes',\r\n        },\r\n        {\r\n          key: '1',\r\n          id: 'Edward King 1',\r\n          title: '32',\r\n          location: 'London, Park Lane no. 1',\r\n          Sdate: '5-10',\r\n          Edate: '9-10',\r\n          status: 'yes',\r\n        },\r\n      ],\r\n      count: 2,\r\n    };\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({\r\n      dataSource: dataSource.filter((item) => item.key !== key),\r\n    });\r\n  };\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      id: `Edward King ${count}`,\r\n      title: '32',\r\n      location: `London, Park Lane no. ${count}`,\r\n      Sdate: '5-10',\r\n      Edate: '9-10',\r\n      status: 'yes',\r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1,\r\n    });\r\n  };\r\n  handleSave = (row) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    this.setState({\r\n      dataSource: newData,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave,\r\n        }),\r\n      };\r\n    });\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={this.handleAdd}\r\n          type=\"primary\"\r\n          style={{\r\n            marginBottom: 16,\r\n          }}\r\n        >\r\n          Add a row\r\n        </Button>\r\n        <Table\r\n          components={components}\r\n          rowClassName={() => 'editable-row'}\r\n          bordered=\"true\"\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n"]},"metadata":{},"sourceType":"module"}